{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:8000/api/\";\n\n// ✅ Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Function to get a valid access token\nexport const getAccessToken = async () => {\n  let accessToken = localStorage.getItem(\"access_token\");\n  const refreshToken = localStorage.getItem(\"refresh_token\");\n  if (!accessToken && refreshToken) {\n    try {\n      console.log(\"Refreshing access token...\");\n      const response = await axios.post(`${API_URL}refresh/`, {\n        refresh: refreshToken\n      });\n\n      // ✅ Store new access token\n      accessToken = response.data.access;\n      localStorage.setItem(\"access_token\", accessToken);\n    } catch (error) {\n      console.error(\"Token refresh failed:\", error);\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"refresh_token\");\n    }\n  }\n  return accessToken;\n};\n\n// ✅ Automatically add Authorization header if token is available\naxiosInstance.interceptors.request.use(async config => {\n  const token = await getAccessToken(); // ✅ Ensure token is always fresh\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","headers","getAccessToken","accessToken","localStorage","getItem","refreshToken","console","log","response","post","refresh","data","access","setItem","error","removeItem","interceptors","request","use","config","token","Authorization","Promise","reject"],"sources":["D:/SC2006/SC2006_HDBResaleVisualiser/HDBResaleVisualiser_App/sc2006_project/src/utils/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://127.0.0.1:8000/api/\";\r\n\r\n// ✅ Create an Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n// ✅ Function to get a valid access token\r\nexport const getAccessToken = async () => {\r\n    let accessToken = localStorage.getItem(\"access_token\");\r\n    const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n    if (!accessToken && refreshToken) {\r\n        try {\r\n            console.log(\"Refreshing access token...\");\r\n            const response = await axios.post(`${API_URL}refresh/`, { refresh: refreshToken });\r\n\r\n            // ✅ Store new access token\r\n            accessToken = response.data.access;\r\n            localStorage.setItem(\"access_token\", accessToken);\r\n        } catch (error) {\r\n            console.error(\"Token refresh failed:\", error);\r\n            localStorage.removeItem(\"access_token\");\r\n            localStorage.removeItem(\"refresh_token\");\r\n        }\r\n    }\r\n    return accessToken;\r\n};\r\n\r\n// ✅ Automatically add Authorization header if token is available\r\naxiosInstance.interceptors.request.use(\r\n    async (config) => {\r\n        const token = await getAccessToken();  // ✅ Ensure token is always fresh\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACtD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EAE1D,IAAI,CAACF,WAAW,IAAIG,YAAY,EAAE;IAC9B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAGb,OAAO,UAAU,EAAE;QAAEc,OAAO,EAAEL;MAAa,CAAC,CAAC;;MAElF;MACAH,WAAW,GAAGM,QAAQ,CAACG,IAAI,CAACC,MAAM;MAClCT,YAAY,CAACU,OAAO,CAAC,cAAc,EAAEX,WAAW,CAAC;IACrD,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CX,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;MACvCZ,YAAY,CAACY,UAAU,CAAC,eAAe,CAAC;IAC5C;EACJ;EACA,OAAOb,WAAW;AACtB,CAAC;;AAED;AACAL,aAAa,CAACmB,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,MAAOC,MAAM,IAAK;EACd,MAAMC,KAAK,GAAG,MAAMnB,cAAc,CAAC,CAAC,CAAC,CAAE;EACvC,IAAImB,KAAK,EAAE;IACPD,MAAM,CAACnB,OAAO,CAACqB,aAAa,GAAG,UAAUD,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAL,KAAK,IAAK;EACP,OAAOQ,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}