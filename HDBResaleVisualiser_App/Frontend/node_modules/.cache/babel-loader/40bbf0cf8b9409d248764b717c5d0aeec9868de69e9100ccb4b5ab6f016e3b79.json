{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:8000/api/\";\n\n// ✅ Create an Axios instance\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// ✅ Function to get a valid access token\nexport const getAccessToken = async () => {\n  let accessToken = localStorage.getItem(\"access_token\");\n  const refreshToken = localStorage.getItem(\"refresh_token\");\n  if (!accessToken && refreshToken) {\n    try {\n      console.log(\"Refreshing access token...\");\n      const response = await axios.post(`${API_URL}refresh/`, {\n        refresh: refreshToken\n      });\n\n      // ✅ Store new access and refresh tokens\n      accessToken = response.data.access;\n      const newRefreshToken = response.data.refresh || refreshToken; // Ensure refresh token is stored\n\n      localStorage.setItem(\"access_token\", accessToken);\n      localStorage.setItem(\"refresh_token\", newRefreshToken);\n    } catch (error) {\n      console.error(\"Token refresh failed:\", error);\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"refresh_token\");\n      return null;\n    }\n  }\n  return accessToken;\n};\n\n// ✅ Automatically attach the Authorization header\naxiosInstance.interceptors.request.use(async config => {\n  const token = await getAccessToken(); // ✅ Ensure token is always fresh\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// ✅ Automatically handle expired tokens on responses\naxiosInstance.interceptors.response.use(response => response, async error => {\n  if (error.response && error.response.status === 401) {\n    console.warn(\"Access token expired. Attempting refresh...\");\n    localStorage.removeItem(\"access_token\"); // Remove old token\n\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n    if (refreshToken) {\n      try {\n        const refreshResponse = await axios.post(`${API_URL}refresh/`, {\n          refresh: refreshToken\n        });\n\n        // ✅ Store new access and refresh tokens\n        const newAccessToken = refreshResponse.data.access;\n        const newRefreshToken = refreshResponse.data.refresh || refreshToken;\n        localStorage.setItem(\"access_token\", newAccessToken);\n        localStorage.setItem(\"refresh_token\", newRefreshToken);\n\n        // ✅ Retry the original request with the new token\n        error.config.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axiosInstance(error.config);\n      } catch (refreshError) {\n        console.error(\"Refresh token failed:\", refreshError);\n        localStorage.removeItem(\"refresh_token\");\n        window.location.href = \"/login\"; // Force logout if refresh fails\n      }\n    } else {\n      window.location.href = \"/login\"; // Force logout if no refresh token\n    }\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","headers","getAccessToken","accessToken","localStorage","getItem","refreshToken","console","log","response","post","refresh","data","access","newRefreshToken","setItem","error","removeItem","interceptors","request","use","config","token","Authorization","Promise","reject","status","warn","refreshResponse","newAccessToken","refreshError","window","location","href"],"sources":["D:/Sc2006/SC2006_HDBResaleVisualiser (2)/SC2006_HDBResaleVisualiser/HDBResaleVisualiser_App/sc2006_project/src/utils/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://127.0.0.1:8000/api/\";\r\n\r\n// ✅ Create an Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n// ✅ Function to get a valid access token\r\nexport const getAccessToken = async () => {\r\n    let accessToken = localStorage.getItem(\"access_token\");\r\n    const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n    if (!accessToken && refreshToken) {\r\n        try {\r\n            console.log(\"Refreshing access token...\");\r\n            const response = await axios.post(`${API_URL}refresh/`, { refresh: refreshToken });\r\n\r\n            // ✅ Store new access and refresh tokens\r\n            accessToken = response.data.access;\r\n            const newRefreshToken = response.data.refresh || refreshToken; // Ensure refresh token is stored\r\n\r\n            localStorage.setItem(\"access_token\", accessToken);\r\n            localStorage.setItem(\"refresh_token\", newRefreshToken);\r\n\r\n        } catch (error) {\r\n            console.error(\"Token refresh failed:\", error);\r\n            localStorage.removeItem(\"access_token\");\r\n            localStorage.removeItem(\"refresh_token\");\r\n            return null;\r\n        }\r\n    }\r\n    return accessToken;\r\n};\r\n\r\n// ✅ Automatically attach the Authorization header\r\naxiosInstance.interceptors.request.use(\r\n    async (config) => {\r\n        const token = await getAccessToken();  // ✅ Ensure token is always fresh\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// ✅ Automatically handle expired tokens on responses\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.warn(\"Access token expired. Attempting refresh...\");\r\n            localStorage.removeItem(\"access_token\"); // Remove old token\r\n\r\n            const refreshToken = localStorage.getItem(\"refresh_token\");\r\n            if (refreshToken) {\r\n                try {\r\n                    const refreshResponse = await axios.post(`${API_URL}refresh/`, { refresh: refreshToken });\r\n\r\n                    // ✅ Store new access and refresh tokens\r\n                    const newAccessToken = refreshResponse.data.access;\r\n                    const newRefreshToken = refreshResponse.data.refresh || refreshToken;\r\n\r\n                    localStorage.setItem(\"access_token\", newAccessToken);\r\n                    localStorage.setItem(\"refresh_token\", newRefreshToken);\r\n\r\n                    // ✅ Retry the original request with the new token\r\n                    error.config.headers.Authorization = `Bearer ${newAccessToken}`;\r\n                    return axiosInstance(error.config);\r\n                } catch (refreshError) {\r\n                    console.error(\"Refresh token failed:\", refreshError);\r\n                    localStorage.removeItem(\"refresh_token\");\r\n                    window.location.href = \"/login\"; // Force logout if refresh fails\r\n                }\r\n            } else {\r\n                window.location.href = \"/login\"; // Force logout if no refresh token\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}