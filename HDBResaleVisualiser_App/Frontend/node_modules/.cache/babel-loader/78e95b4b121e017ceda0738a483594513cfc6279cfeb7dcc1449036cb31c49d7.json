{"ast":null,"code":"import axios from\"axios\";const API_URL=\"http://127.0.0.1:8000/api/\";// ✅ Create an Axios instance\nconst axiosInstance=axios.create({baseURL:API_URL,headers:{\"Content-Type\":\"application/json\"}});// ✅ Function to get a valid access token\nexport const getAccessToken=async()=>{let accessToken=localStorage.getItem(\"access_token\");const refreshToken=localStorage.getItem(\"refresh_token\");if(!accessToken&&refreshToken){try{console.log(\"Refreshing access token...\");const response=await axios.post(`${API_URL}refresh/`,{refresh:refreshToken});// ✅ Store new access and refresh tokens\naccessToken=response.data.access;const newRefreshToken=response.data.refresh||refreshToken;// Ensure refresh token is stored\nlocalStorage.setItem(\"access_token\",accessToken);localStorage.setItem(\"refresh_token\",newRefreshToken);}catch(error){console.error(\"Token refresh failed:\",error);localStorage.removeItem(\"access_token\");localStorage.removeItem(\"refresh_token\");return null;}}return accessToken;};// ✅ Automatically attach the Authorization header\naxiosInstance.interceptors.request.use(async config=>{const token=await getAccessToken();// ✅ Ensure token is always fresh\nif(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// ✅ Automatically handle expired tokens on responses\naxiosInstance.interceptors.response.use(response=>response,async error=>{if(error.response&&error.response.status===401){console.warn(\"Access token expired. Attempting refresh...\");localStorage.removeItem(\"access_token\");// Remove old token\nconst refreshToken=localStorage.getItem(\"refresh_token\");if(refreshToken){try{const refreshResponse=await axios.post(`${API_URL}refresh/`,{refresh:refreshToken});// ✅ Store new access and refresh tokens\nconst newAccessToken=refreshResponse.data.access;const newRefreshToken=refreshResponse.data.refresh||refreshToken;localStorage.setItem(\"access_token\",newAccessToken);localStorage.setItem(\"refresh_token\",newRefreshToken);// ✅ Retry the original request with the new token\nerror.config.headers.Authorization=`Bearer ${newAccessToken}`;return axiosInstance(error.config);}catch(refreshError){console.error(\"Refresh token failed:\",refreshError);localStorage.removeItem(\"refresh_token\");window.location.href=\"/login\";// Force logout if refresh fails\n}}else{window.location.href=\"/login\";// Force logout if no refresh token\n}}return Promise.reject(error);});export default axiosInstance;","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","headers","getAccessToken","accessToken","localStorage","getItem","refreshToken","console","log","response","post","refresh","data","access","newRefreshToken","setItem","error","removeItem","interceptors","request","use","config","token","Authorization","Promise","reject","status","warn","refreshResponse","newAccessToken","refreshError","window","location","href"],"sources":["D:/SC2006/SC2006_HDBResaleVisualiser/SC2006_HDBResaleVisualiser/HDBResaleVisualiser_App/sc2006_project/src/utils/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://127.0.0.1:8000/api/\";\r\n\r\n// ✅ Create an Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n// ✅ Function to get a valid access token\r\nexport const getAccessToken = async () => {\r\n    let accessToken = localStorage.getItem(\"access_token\");\r\n    const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n    if (!accessToken && refreshToken) {\r\n        try {\r\n            console.log(\"Refreshing access token...\");\r\n            const response = await axios.post(`${API_URL}refresh/`, { refresh: refreshToken });\r\n\r\n            // ✅ Store new access and refresh tokens\r\n            accessToken = response.data.access;\r\n            const newRefreshToken = response.data.refresh || refreshToken; // Ensure refresh token is stored\r\n\r\n            localStorage.setItem(\"access_token\", accessToken);\r\n            localStorage.setItem(\"refresh_token\", newRefreshToken);\r\n\r\n        } catch (error) {\r\n            console.error(\"Token refresh failed:\", error);\r\n            localStorage.removeItem(\"access_token\");\r\n            localStorage.removeItem(\"refresh_token\");\r\n            return null;\r\n        }\r\n    }\r\n    return accessToken;\r\n};\r\n\r\n// ✅ Automatically attach the Authorization header\r\naxiosInstance.interceptors.request.use(\r\n    async (config) => {\r\n        const token = await getAccessToken();  // ✅ Ensure token is always fresh\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// ✅ Automatically handle expired tokens on responses\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.warn(\"Access token expired. Attempting refresh...\");\r\n            localStorage.removeItem(\"access_token\"); // Remove old token\r\n\r\n            const refreshToken = localStorage.getItem(\"refresh_token\");\r\n            if (refreshToken) {\r\n                try {\r\n                    const refreshResponse = await axios.post(`${API_URL}refresh/`, { refresh: refreshToken });\r\n\r\n                    // ✅ Store new access and refresh tokens\r\n                    const newAccessToken = refreshResponse.data.access;\r\n                    const newRefreshToken = refreshResponse.data.refresh || refreshToken;\r\n\r\n                    localStorage.setItem(\"access_token\", newAccessToken);\r\n                    localStorage.setItem(\"refresh_token\", newRefreshToken);\r\n\r\n                    // ✅ Retry the original request with the new token\r\n                    error.config.headers.Authorization = `Bearer ${newAccessToken}`;\r\n                    return axiosInstance(error.config);\r\n                } catch (refreshError) {\r\n                    console.error(\"Refresh token failed:\", refreshError);\r\n                    localStorage.removeItem(\"refresh_token\");\r\n                    window.location.href = \"/login\"; // Force logout if refresh fails\r\n                }\r\n            } else {\r\n                window.location.href = \"/login\"; // Force logout if no refresh token\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}