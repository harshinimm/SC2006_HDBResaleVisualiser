{"ast":null,"code":"import{useState,useEffect}from\"react\";import Navbar from\"./Navbar\";import LoginModal from\"../login/LoginModal\";import SearchSection from\"./SearchSection\";import FeaturesSection from\"./FeaturesSection\";import TransactionsTable from\"./TransactionsTable\";import axiosInstance from\"../utils/axiosInstance\";// Use the Axios instance that handles token refresh\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function HomePage(){const[search,setSearch]=useState(\"\");const[isLoginOpen,setIsLoginOpen]=useState(false);const[isLoggedIn,setIsLoggedIn]=useState(false);const[username,setUsername]=useState(\"\");// ✅ Check if user is already logged in when the component mounts\nuseEffect(()=>{const token=localStorage.getItem(\"access_token\");if(token){fetchUserProfile();// ✅ Call fetchUserProfile correctly\n}},[]);// ✅ Run only once on mount\n// ✅ Fetch the logged-in user's profile\nconst fetchUserProfile=async()=>{try{const response=await axiosInstance.get(\"user-profile/\");const loggedInUsername=response.data.username;// Store username in state and localStorage for persistence\nsetUsername(loggedInUsername);localStorage.setItem(\"username\",loggedInUsername);setIsLoggedIn(true);// ✅ Ensure user is marked as logged in\n}catch(error){console.error(\"Error fetching user profile:\",error);setIsLoggedIn(false);// ✅ Logout if fetching profile fails\n}};// ✅ Handle Login and store user details\nconst handleLogin=async(user,pass)=>{try{const response=await axiosInstance.post(\"login/\",{username:user,password:pass});if(response.status===200){const{access,refresh}=response.data;// ✅ Store tokens BEFORE fetching profile\nlocalStorage.setItem(\"access_token\",access);localStorage.setItem(\"refresh_token\",refresh);setIsLoggedIn(true);setIsLoginOpen(false);// ✅ Fetch user profile AFTER login\nfetchUserProfile();}}catch(error){console.error(\"Login failed:\",error);}};// ✅ Handle Logout (clear session)\nconst handleLogout=()=>{localStorage.removeItem(\"access_token\");localStorage.removeItem(\"refresh_token\");localStorage.removeItem(\"username\");setIsLoggedIn(false);setUsername(\"\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-white text-red-900\",children:[/*#__PURE__*/_jsx(Navbar,{isLoggedIn:isLoggedIn,username:username,handleLogout:handleLogout,handleLoginOpen:()=>setIsLoginOpen(true)}),/*#__PURE__*/_jsx(LoginModal,{isLoginOpen:isLoginOpen,setIsLoginOpen:setIsLoginOpen,handleLogin:handleLogin,setIsLoggedIn:setIsLoggedIn,setUsername:setUsername}),/*#__PURE__*/_jsx(SearchSection,{search:search,setSearch:setSearch}),/*#__PURE__*/_jsx(FeaturesSection,{}),/*#__PURE__*/_jsx(TransactionsTable,{})]});}","map":{"version":3,"names":["useState","useEffect","Navbar","LoginModal","SearchSection","FeaturesSection","TransactionsTable","axiosInstance","jsx","_jsx","jsxs","_jsxs","HomePage","search","setSearch","isLoginOpen","setIsLoginOpen","isLoggedIn","setIsLoggedIn","username","setUsername","token","localStorage","getItem","fetchUserProfile","response","get","loggedInUsername","data","setItem","error","console","handleLogin","user","pass","post","password","status","access","refresh","handleLogout","removeItem","className","children","handleLoginOpen"],"sources":["D:/Sc2006/SC2006_HDBResaleVisualiser (2)/SC2006_HDBResaleVisualiser/HDBResaleVisualiser_App/sc2006_project/src/homepage/HomePage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport LoginModal from \"../login/LoginModal\";\nimport SearchSection from \"./SearchSection\";\nimport FeaturesSection from \"./FeaturesSection\";\nimport TransactionsTable from \"./TransactionsTable\";\nimport axiosInstance from \"../utils/axiosInstance\"; // Use the Axios instance that handles token refresh\n\nexport default function HomePage() {\n  const [search, setSearch] = useState(\"\");\n  const [isLoginOpen, setIsLoginOpen] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n\n  // ✅ Check if user is already logged in when the component mounts\n  useEffect(() => {\n    const token = localStorage.getItem(\"access_token\");\n    if (token) {\n      fetchUserProfile(); // ✅ Call fetchUserProfile correctly\n    }\n  }, []); // ✅ Run only once on mount\n\n  // ✅ Fetch the logged-in user's profile\n  const fetchUserProfile = async () => {\n    try {\n      const response = await axiosInstance.get(\"user-profile/\");\n      const loggedInUsername = response.data.username;\n\n      // Store username in state and localStorage for persistence\n      setUsername(loggedInUsername);\n      localStorage.setItem(\"username\", loggedInUsername);\n      setIsLoggedIn(true); // ✅ Ensure user is marked as logged in\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      setIsLoggedIn(false); // ✅ Logout if fetching profile fails\n    }\n  };\n\n  // ✅ Handle Login and store user details\n  const handleLogin = async (user, pass) => {\n    try {\n      const response = await axiosInstance.post(\"login/\", { username: user, password: pass });\n\n      if (response.status === 200) {\n        const { access, refresh } = response.data;\n\n        // ✅ Store tokens BEFORE fetching profile\n        localStorage.setItem(\"access_token\", access);\n        localStorage.setItem(\"refresh_token\", refresh);\n\n        setIsLoggedIn(true);\n        setIsLoginOpen(false);\n\n        // ✅ Fetch user profile AFTER login\n        fetchUserProfile();\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n    }\n  };\n\n  // ✅ Handle Logout (clear session)\n  const handleLogout = () => {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    localStorage.removeItem(\"username\");\n\n    setIsLoggedIn(false);\n    setUsername(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white text-red-900\">\n      <Navbar \n        isLoggedIn={isLoggedIn} \n        username={username} \n        handleLogout={handleLogout} \n        handleLoginOpen={() => setIsLoginOpen(true)} \n      />\n      <LoginModal \n        isLoginOpen={isLoginOpen} \n        setIsLoginOpen={setIsLoginOpen} \n        handleLogin={handleLogin} \n        setIsLoggedIn={setIsLoggedIn} \n        setUsername={setUsername} \n      />\n      <SearchSection search={search} setSearch={setSearch} />\n      <FeaturesSection />\n      <TransactionsTable />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}