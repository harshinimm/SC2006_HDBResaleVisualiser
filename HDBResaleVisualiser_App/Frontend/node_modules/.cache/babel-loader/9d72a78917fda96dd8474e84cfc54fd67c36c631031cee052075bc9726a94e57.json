{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://127.0.0.1:8000/api/\";\n\n// Function to get a new access token using refresh token\nconst getAccessToken = async () => {\n  const refreshToken = localStorage.getItem(\"refresh_token\");\n  if (!refreshToken) return null;\n  try {\n    const response = await axios.post(`${API_URL}account/refresh/`, {\n      refresh: refreshToken\n    }); // Updated URL\n    const newAccessToken = response.data.access;\n    localStorage.setItem(\"access_token\", newAccessToken);\n    return newAccessToken;\n  } catch (err) {\n    console.error(\"Token refresh failed:\", err);\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"refresh_token\");\n    return null;\n  }\n};\n\n// Axios instance for API calls with base URL\nconst axiosInstance = axios.create({\n  baseURL: API_URL\n});\n\n// Request: Attach access token in headers\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n\n// Response: Refresh token if status is 401\naxiosInstance.interceptors.response.use(res => res, async err => {\n  var _err$response;\n  const original = err.config;\n  if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401 && !original._retry) {\n    original._retry = true;\n    const newToken = await getAccessToken();\n    if (newToken) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${newToken}`;\n      return axiosInstance(original);\n    }\n  }\n  return Promise.reject(err);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_URL","getAccessToken","refreshToken","localStorage","getItem","response","post","refresh","newAccessToken","data","access","setItem","err","console","error","removeItem","axiosInstance","create","baseURL","interceptors","request","use","config","token","headers","Authorization","res","_err$response","original","status","_retry","newToken","defaults","common","Promise","reject"],"sources":["D:/Sc2006/SC2006_HDBResaleVisualiser (2)/SC2006_HDBResaleVisualiser/HDBResaleVisualiser_App/sc2006_project/src/utils/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://127.0.0.1:8000/api/\";\r\n\r\n// Function to get a new access token using refresh token\r\nconst getAccessToken = async () => {\r\n  const refreshToken = localStorage.getItem(\"refresh_token\");\r\n  if (!refreshToken) return null;\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}account/refresh/`, { refresh: refreshToken }); // Updated URL\r\n    const newAccessToken = response.data.access;\r\n    localStorage.setItem(\"access_token\", newAccessToken);\r\n    return newAccessToken;\r\n  } catch (err) {\r\n    console.error(\"Token refresh failed:\", err);\r\n    localStorage.removeItem(\"access_token\");\r\n    localStorage.removeItem(\"refresh_token\");\r\n    return null;\r\n  }\r\n};\r\n\r\n// Axios instance for API calls with base URL\r\nconst axiosInstance = axios.create({ baseURL: API_URL });\r\n\r\n// Request: Attach access token in headers\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n  if (token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n});\r\n\r\n// Response: Refresh token if status is 401\r\naxiosInstance.interceptors.response.use(\r\n  res => res,\r\n  async err => {\r\n    const original = err.config;\r\n    if (err.response?.status === 401 && !original._retry) {\r\n      original._retry = true;\r\n      const newToken = await getAccessToken();\r\n      if (newToken) {\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${newToken}`;\r\n        return axiosInstance(original);\r\n      }\r\n    }\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B;;AAE5C;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EAC1D,IAAI,CAACF,YAAY,EAAE,OAAO,IAAI;EAE9B,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,kBAAkB,EAAE;MAAEO,OAAO,EAAEL;IAAa,CAAC,CAAC,CAAC,CAAC;IAC5F,MAAMM,cAAc,GAAGH,QAAQ,CAACI,IAAI,CAACC,MAAM;IAC3CP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,cAAc,CAAC;IACpD,OAAOA,cAAc;EACvB,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC3CT,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;IACvCZ,YAAY,CAACY,UAAU,CAAC,eAAe,CAAC;IACxC,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGjB,KAAK,CAACkB,MAAM,CAAC;EAAEC,OAAO,EAAElB;AAAQ,CAAC,CAAC;;AAExD;AACAgB,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,KAAK,GAAGpB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAImB,KAAK,EAAED,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAC3D,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,aAAa,CAACG,YAAY,CAACd,QAAQ,CAACgB,GAAG,CACrCK,GAAG,IAAIA,GAAG,EACV,MAAMd,GAAG,IAAI;EAAA,IAAAe,aAAA;EACX,MAAMC,QAAQ,GAAGhB,GAAG,CAACU,MAAM;EAC3B,IAAI,EAAAK,aAAA,GAAAf,GAAG,CAACP,QAAQ,cAAAsB,aAAA,uBAAZA,aAAA,CAAcE,MAAM,MAAK,GAAG,IAAI,CAACD,QAAQ,CAACE,MAAM,EAAE;IACpDF,QAAQ,CAACE,MAAM,GAAG,IAAI;IACtB,MAAMC,QAAQ,GAAG,MAAM9B,cAAc,CAAC,CAAC;IACvC,IAAI8B,QAAQ,EAAE;MACZhC,KAAK,CAACiC,QAAQ,CAACR,OAAO,CAACS,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUF,QAAQ,EAAE;MACrE,OAAOf,aAAa,CAACY,QAAQ,CAAC;IAChC;EACF;EACA,OAAOM,OAAO,CAACC,MAAM,CAACvB,GAAG,CAAC;AAC5B,CACF,CAAC;AAED,eAAeI,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}